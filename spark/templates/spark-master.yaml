apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-master
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}-master
        group: {{ template "fullname" . }}
      annotations:
        checksum/config: {{ include "oidcconfig" . | sha256sum }}
    spec:
      volumes:
        - name: oidcconfig
          secret:
            secretName: {{ template "fullname" . }}
        - name: {{ template "fullname" . }}-rewrite-config-vol
          configMap:
            name: {{ template "fullname" . }}-rewrite-config
        {{ if ne .Values.persistentStorage.existingClaim "" }}
        - name: {{ .Values.persistentStorage.existingClaimName }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentStorage.existingClaim }}
        {{ end }}
      securityContext:
        runAsNonRoot: true
        fsGroup: 999
      containers:
        - name: auth-proxy
          image: quay.io/uninett/goidc-proxy:v1.1.3
          imagePullPolicy: Always
          env:
            - name: DATAPORTEN_CLIENTID
              valueFrom:
                secretKeyRef:
                  name: {{ template "fullname" . }}
                  key: dataporten_client_id
            - name: DATAPORTEN_CLIENTSECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "fullname" . }}
                  key: dataporten_client_secret
          ports:
            - containerPort: 8000
          securityContext:
            runAsUser: 65534
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
            - name: oidcconfig
              mountPath: /conf
          workingDir: /conf
        - name: spark-master
          image: {{ .Values.masterImage }}
          imagePullPolicy: Always
          args: ["/usr/local/bin/start-master.sh"]
          ports:
            - containerPort: 7077
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            runAsUser: 999
          resources:
            requests:
                cpu: {{ .Values.master.resources.requests.cpu }}
                memory: {{ .Values.master.resources.requests.memory }}
            limits:
                cpu: {{ .Values.master.resources.limits.cpu }}
                memory: {{ .Values.master.resources.limits.memory }}
          env:
            - name: SPARK_PUBLIC_DNS
              value: {{ .Values.ingress.host }}
          {{- if ne .Values.persistentStorage.existingClaim "" }}
            - name: SPARK_RECOVERY_DIR
              value: /mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools/spark-master
          volumeMounts:
          - name: {{ .Values.persistentStorage.existingClaimName }}
            mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
          {{- end }}

---
kind: Service
apiVersion: v1
metadata:
  name: {{ template "fullname" . }}-master
  labels:
    group: {{ template "fullname" . }}
spec:
  ports:
    - port: 7077
      targetPort: 7077
  selector:
    app: {{ template "fullname" . }}-master

---
kind: Service
apiVersion: v1
metadata:
  name: {{ template "fullname" . }}-master-ui
  labels:
    group: {{ template "fullname" . }}
spec:
  ports:
    - port: 80
      targetPort: 8000
  selector:
    app: {{ template "fullname" . }}-master

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-rewrite-config
data:
  default.conf: |
    upstream node {
      server localhost:8080;
    }

    server {
        server_name             _;
        listen                  9001;

        location / {
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header Host {{ .Values.ingress.host }};
            proxy_pass http://node;
            proxy_redirect off;
            port_in_redirect off;
        }
        }
