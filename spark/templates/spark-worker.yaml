apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-spark-worker
spec:
  replicas: {{ .Values.workers.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}-spark-worker
        group: {{ template "fullname" . }}-spark
    spec:
      {{ if ne .Values.persistentStorage.existingClaim "" }}
      volumes:
        - name: {{ .Values.persistentStorage.existingClaimName }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentStorage.existingClaim }}
      {{ end }}
      securityContext:
        runAsNonRoot: true
        fsGroup: 999
      containers:
        - name: spark-worker
          image: {{ .Values.workerImage }}
          imagePullPolicy: Always
          args: ["/usr/local/bin/start-worker.sh"]
          env:
            - name: SPARK_WORKER_MEMORY
              value: '1G'
            - name: SPARK_WORKER_CORES
              value: '2'
            - name: SPARK_MASTER_SERVICE_HOST
              value: {{ template "fullname" . }}-spark-master
          ports:
            - containerPort: 8081
          livenessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            runAsUser: 999
          resources:
            requests:
                cpu: {{ .Values.workers.resources.requests.cpu }}
                memory: {{ .Values.workers.resources.requests.memory }}
            limits:
                cpu: {{ .Values.workers.resources.limits.cpu }}
                memory: {{ .Values.workers.resources.limits.memory }}
        {{- if ne .Values.persistentStorage.existingClaim "" }}
        volumeMounts:
        - name: {{ .Values.persistentStorage.existingClaimName }}
          mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
        {{- end -}}
