apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-worker
spec:
  replicas: {{ .Values.advanced.workers.replicas }}
  selector:
    matchLabels:
        app: {{ template "fullname" . }}-worker
        group: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}-worker
        group: {{ template "fullname" . }}
    spec:
      volumes:
        - name: passwd
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: passwd
              path: passwd
        - name: group
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: group
              path: group
      {{ if ne .Values.persistentStorage.existingClaim "" }}
        - name: {{ .Values.persistentStorage.existingClaimName }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentStorage.existingClaim }}
            readOnly: {{ .Values.persistentStorage.readOnly }}
      {{ end }}
      securityContext:
        runAsNonRoot: true
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      containers:
        - name: spark-worker
          image: {{ .Values.advanced.workerImage }}
          imagePullPolicy: Always
          args: ["/usr/local/bin/start-worker.sh"]
          env:
            - name: SPARK_WORKER_MEMORY
              value: {{ .Values.advanced.workers.resources.requests.memory }}
            - name: SPARK_WORKER_CORES
              value: {{ .Values.advanced.workers.resources.requests.cpu | quote }}
            - name: OWNER_ID
              value: {{ .Values.appstore_generated_data.dataporten.owner }}
            - name: SPARK_MASTER_SERVICE_HOST
              value: {{ template "fullname" . }}-master
          ports:
            - containerPort: 8081
          livenessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            runAsUser: {{ .Values.uid }}
            runAsGroup: {{ .Values.gid }}
          resources:
            requests:
                cpu: {{ .Values.advanced.workers.resources.requests.cpu }}
                memory: {{ .Values.advanced.workers.resources.requests.memory }}
            limits:
                cpu: {{ .Values.advanced.workers.resources.limits.cpu }}
                memory: {{ .Values.advanced.workers.resources.limits.memory }}
          volumeMounts:
          - name: passwd
            mountPath: /etc/passwd
            subPath: passwd
          - name: group
            mountPath: /etc/group
            subPath: group
          {{- if ne .Values.persistentStorage.existingClaim "" }}
          - name: {{ .Values.persistentStorage.existingClaimName }}
            mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
            {{ if ne .Values.persistentStorage.subPath "/" }}
            subPath: {{ .Values.persistentStorage.subPath }}
            mountPropagation: HostToContainer
            {{ end }}
          {{- end -}}
