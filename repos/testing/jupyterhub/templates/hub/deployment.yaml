apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ .Release.Name }}-hub
spec:
  replicas: 1
  selector:
    matchLabels:
      name: {{ .Release.Name }}-hub
      group: {{ .Release.Name }}-jupyterhub
      component: hub
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-hub
        group: {{ .Release.Name }}-jupyterhub
        component: hub
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        # This lets us autorestart when the configmap changes!
        checksum/config-map: {{ include (print $.Template.BasePath "/hub/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/hub/secret.yaml") . | sha256sum }}
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values: ['proxy']
                    - key: release
                      operator: In
                      values: [ {{ .Release.Name | quote }} ]
      securityContext:
        runAsNonRoot: true
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ .Release.Name }}-hub-config
      - name: secret
        secret:
          secretName: {{ .Release.Name }}-hub-secret
      - name: passwd
        configMap:
          name: {{ template "fullname" . }}
          items:
          - key: passwd
            path: passwd
      - name: group
        configMap:
          name: {{ template "fullname" . }}
          items:
          - key: group
            path: group
      {{- if ne .Values.persistentStorage.existingClaim "" }}
      - name: {{ .Values.persistentStorage.existingClaimName }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistentStorage.existingClaim }}
          readOnly: {{ .Values.persistentStorage.readOnly }}
      initContainers:
      - name: busybox
        image: busybox:1
        securityContext:
          runAsUser: {{ .Values.uid }}
        args:
          - "/bin/mkdir"
          - "-p"
          - "/mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools/{{ .Release.Name }}-hub"
          - "/mnt/{{ .Values.persistentStorage.existingClaimName }}/home"
        volumeMounts:
        - name: {{ .Values.persistentStorage.existingClaimName }}
          mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
      {{- end }}
      containers:
      - name: hub-container
        image: quay.io/uninett/jupyterhub-server:20180822-b81d5e2
        command:
          - jupyterhub
          - --config
          - /srv/jupyterhub_config.py
          - --upgrade-db
        securityContext:
          runAsUser: {{ .Values.uid }}
        volumeMounts:
          - mountPath: /etc/jupyterhub/config/
            name: config
          - mountPath: /etc/jupyterhub/secret/
            name: secret
          - name: passwd
            mountPath: /etc/passwd
            subPath: passwd
          - name: group
            mountPath: /etc/group
            subPath: group
          {{- if ne .Values.persistentStorage.existingClaim "" }}
          - name: {{ .Values.persistentStorage.existingClaimName }}
            mountPath: /srv/jupyterhub
            subPath: .tools/{{ .Release.Name }}-hub
            {{ if ne .Values.persistentStorage.subPath "/" }}
            subPath: {{ .Values.persistentStorage.subPath }}
            {{ end }}
          {{- end }}
        resources:
{{ toYaml .Values.users.resources.selected | indent 12 }}
        env:
        # Put this here directly so hub will restart when we
        # change this
        - name: SINGLEUSER_IMAGE
          value:  "{{ .Values.advanced.userImage }}"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OWNER_ID
          value: {{ .Values.appstore_generated_data.dataporten.owner }}
        - name: PROXY_PUBLIC_SERVICE_NAME
          value: {{ .Release.Name | upper | replace "-" "_" }}_PROXY_HTTP_SERVICE
        - name: PROXY_API_SERVICE_NAME
          value: {{ .Release.Name | upper | replace "-" "_" }}_PROXY_API_SERVICE
        - name: HUB_SERVICE_NAME
          value: {{ .Release.Name | upper | replace "-" "_" }}_HUB_SERVICE
        - name: OAUTH_CLIENT_ID
          value: "{{ .Values.appstore_generated_data.dataporten.id }}"
        - name: OAUTH_CLIENT_SECRET
          value: "{{ .Values.appstore_generated_data.dataporten.client_secret }}"
        - name: OAUTH_CALLBACK_URL
          value: "https://{{ .Values.ingress.host }}/hub/oauth_callback"
        - name: GROUP_URLS
          value: "{{ include "all_endpoints" . }}"
        - name: AUTHORIZED_GROUPS
          value: "{{- join "," .Values.appstore_generated_data.dataporten.authorized_groups -}}"
        - name: OAUTH2_USERDATA_URL
          value: "https://apps-mas-sigma.dataporten-api.no/userinfo"
        - name: CONFIGPROXY_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-hub-secret
              key: proxy.token
        - name: OAUTH2_TOKEN_URL
          value: "https://auth.dataporten.no/oauth/token"
        - name: OAUTH2_AUTHORIZE_URL
          value: "https://auth.dataporten.no/oauth/authorization"
        - name: GROUP_URLS
          value: "https://apps-mas-sigma.dataporten-api.no/groups/me/groups,https://groups-api.dataporten.no/groups/me/groups"
        ports:
          - containerPort: 8081
      serviceAccountName: {{ .Release.Name }}-hub
