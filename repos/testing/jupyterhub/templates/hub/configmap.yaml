kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-hub-config
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
data:
  {{- /* Cull */}}
  {{- if .Values.advanced.killIdlePods.enabled }}
  cull.enabled: "true"
  cull.users: "false"
  cull.timeout: {{ .Values.advanced.killIdlePods.timeout | quote }}
  cull.every: "600"
  cull.concurrency: {{ .Values.advanced.killIdlePods.concurrency | quote }}
  {{- end }}

  {{- /* Auth */}}
  auth.state.enabled: "false"
  auth.admin.access: "true"
  auth.admin.users: |
    - {{ .Values.appstore_generated_data.dataporten.owner }}
    {{- if ne .Values.advanced.additionalAdmin "" }}
    - {{ .Values.advanced.additionalAdmin }}
    {{- end }}
  auth.type: "dataporten"

  {{- /* Singleuser */}}
  singleuser.start-timeout: "300"
  singleuser.image-pull-policy: IfNotPresent
  singleuser.scheduler-strategy: pack
  singleuser.cmd: "/usr/local/bin/start-notebook.sh"
  {{- if .Values.advanced.killIdlePods.enabled }}
  singleuser.default-url: "/lab"
  singleuser.extra-env: |
    JUPYTER_ENABLE_LAB: "1"
  {{- end }}
  singleuser.uid: "{{ .Values.uid }}"
  singleuser.fs-gid: "{{ .Values.gid }}"
  {{ $firstGroup := .Values.supplementalGroups | first }}
  {{- if $firstGroup.gid }}
  singleuser.supplemental-gids: "{{ include "supplemental_groups_list" . }}"
  {{- end }}
  singleuser.service-account-name: "default"
  singleuser.pod-name-template: "{{.Release.Name}}-jupyter-{username}"
  singleuser.node-selector: "{}"
  {{- if ne (first .Values.persistentStorage).existingClaim "" }}
  singleuser.storage.type: "static"
  singleuser.storage.static.pvc-name: {{ (first .Values.persistentStorage).existingClaim }}
  singleuser.storage.static.sub-path: 'home/{username}'
  singleuser.init-containers: '[{"name": "busybox", "image": "busybox:1", "args": ["/bin/sh", "-c", "-x", "mkdir -p /mnt/home/{username}"], "security_context": {"runAsUser": {{ .Values.uid }}, "runAsGroup": {{ .Values.gid }}}, "volume_mounts": [{"name": "home", "mountPath": "/mnt/home", "subPath": "home"}]}]'
  singleuser.storage.extra-volumes: '[{"name": "passwd", "configMap": { "name": "{{ template "fullname" . }}", "items": [{"key": "passwd", "path": "passwd"}] }}, {"name": "group", "configMap": { "name": "{{ template "fullname" . }}", "items": [{"key": "group", "path": "group"}] }}]'
  {{- if .Values.advanced.sharedData.enabled }}
  singleuser.storage.extra-volume-mounts: '[{"name": "home", "mountPath": "/mnt/data", "mountPropagation": "HostToContainer", "subPath": "{{.Values.advanced.sharedData.subPath}}", "readOnly": {{.Values.advanced.sharedData.readOnly}}  }, {"name": "passwd", "mountPath":"/etc/passwd", "subPath": "passwd"}, {"name": "group", "mountPath":"/etc/group", "subPath": "group"}]'
  {{- else }}
  singleuser.storage.extra-volume-mounts: '[{"name": "passwd", "mountPath":"/etc/passwd", "subPath": "passwd"}, {"name": "group", "mountPath":"/etc/group", "subPath": "group"}]'
  {{- end }}
  {{- else }}
  singleuser.storage.type: "none"
  {{- end }}
  singleuser.storage.home_mount_path: "/home/notebook"
  {{- if .Values.userNotebookType.resources.limits.memory }}
  singleuser.memory.limit: {{ .Values.userNotebookType.resources.limits.memory | quote}}
  {{- end }}
  {{- if .Values.userNotebookType.resources.requests.memory }}
  singleuser.memory.guarantee: {{ .Values.userNotebookType.resources.requests.memory | quote}}
  {{- end }}
  {{- if .Values.userNotebookType.resources.limits.cpu }}
  singleuser.cpu.limit: {{ .Values.userNotebookType.resources.limits.cpu | quote}}
  {{- end }}
  {{- if .Values.userNotebookType.resources.requests.cpu }}
  singleuser.cpu.guarantee: {{ .Values.userNotebookType.resources.requests.cpu | quote}}
  {{- end }}
  {{- if .Values.userNotebookType.resources.requests.gpu }}
  singleuser.extra-resource.guarantees: '{ "nvidia.com/gpu": {{ .Values.userNotebookType.resources.requests.gpu }} }'
  {{- end }}
  {{- if .Values.userNotebookType.resources.limits.gpu }}
  singleuser.extra-resource.limits: '{ "nvidia.com/gpu": {{ .Values.userNotebookType.resources.requests.gpu }} }'
  {{- end }}
  singleuser.extra-labels: |
    hub.jupyter.org/network-access-hub: "true"

  kubespawner.common-labels: |
    group: {{ .Release.Name }}-jupyterhub
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}

  hub.base_url: "/"
  hub.db_url: "sqlite:///jupyterhub.sqlite" # Use in memory
  hub.concurrent-spawn-limit: {{ .Values.advanced.notebook.spawnLimit | quote }}
  debug.enabled: {{ .Values.advanced.debug | quote }}

{{- if .Values.advanced.sharedData.minio.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-minio
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
type: Opaque
data:
  passwd: {{ include "minio-passwd" . | quote }}
  group: {{ include "minio-group" . | quote }}
{{- end }}
