apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
    spec:
      volumes:
        - name: passwd
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: passwd
              path: passwd
        - name: group
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: group
              path: group
       {{ if ne .Values.persistentStorage.existingClaim "" }}
        - name: {{ .Values.persistentStorage.existingClaimName }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentStorage.existingClaim }}
            readOnly: {{ .Values.persistentStorage.readOnly }}
       {{- end }}
      {{ if (ne .Values.persistentStorage.existingClaim "") and (not .Values.persistentStorage.readOnly) }}
      initContainers:
      - name: busybox
        image: busybox:1
        securityContext:
          runAsUser: {{ .Values.uid }}
        args:
          - /bin/sh
          - -c
          - -x
          - "mkdir -p /mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools/{{ template "fullname" . }} && chmod g+w /mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools"
        volumeMounts:
        - name: {{ .Values.persistentStorage.existingClaimName }}
          mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
          {{ if ne .Values.persistentStorage.subPath "/" }}
          subPath: {{ .Values.persistentStorage.subPath }}
          {{ end }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      containers:
      - name: minio
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: MINIO_SECRET_KEY
        - name: TZ
          value: Europe/Oslo
        image: quay.io/uninett/minio:20180823-b36e663
        {{ if ne .Values.persistentStorage.existingClaim "" }}
        {{ if .Values.persistentStorage.readOnly }}
        args: [ 'server', '--quiet', '--config-dir', '/tmp/.minio', '/mnt/{{ .Values.persistentStorage.existingClaimName }}' ]
        {{ else }}
        args: [ 'server', '--quiet', '--config-dir', '/mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools/{{ template "fullname" . }}', '/mnt/{{ .Values.persistentStorage.existingClaimName }}' ]
        {{ end }}
        {{ else }}
        args: [ 'server', '--quiet', '--config-dir', '/tmp/.minio', '/tmp' ]
        {{ end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
        - containerPort: 9000
        securityContext:
          runAsUser: {{ .Values.uid }}
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          timeoutSeconds: 30
        volumeMounts:
        - name: passwd
          mountPath: /etc/passwd
          subPath: passwd
        - name: group
          mountPath: /etc/group
          subPath: group
        {{ if ne .Values.persistentStorage.existingClaim "" }}
        - name: {{ .Values.persistentStorage.existingClaimName }}
          mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
          {{ if ne .Values.persistentStorage.subPath "/" }}
          subPath: {{ .Values.persistentStorage.subPath }}
          {{ end }}
        {{ end }}

{{ if (ne .Values.persistentStorage.existingClaim "") and (not .Values.persistentStorage.readOnly) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}-cleaner"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{.Release.Name}}-cleaner"
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      volumes:
      - name: {{ .Values.persistentStorage.existingClaimName }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistentStorage.existingClaim }}
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.uid }}
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      containers:
      - name: cleaner-job
        image: "alpine:3.8"
        imagePullPolicy: Always
        command:
          - /bin/sh
        args:
          - -c
          - -x
          - "rm -rf /mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools/{{ template "fullname" . }} /mnt/{{ .Values.persistentStorage.existingClaimName }}/.minio.sys /mnt/{{ .Values.persistentStorage.existingClaimName }}/.minio"
        volumeMounts:
        - name: {{ .Values.persistentStorage.existingClaimName }}
          mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
{{ end }}
